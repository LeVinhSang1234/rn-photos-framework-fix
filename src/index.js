import{NativeEventEmitter,NativeModules,Platform}from"react-native";import Album from"./album";import AlbumQueryResult from"./album-query-result";import AlbumQueryResultCollection from"./album-query-result-collection";import EventEmitter from"../event-emitter";import ImageAsset from"./image-asset";import VideoAsset from"./video-asset";import videoPropsResolver from"./video-props-resolver";import uuidGenerator from"./uuid-generator";const RNPFManager=NativeModules.RNPFManager;if(!RNPFManager&&"ios"===Platform.OS)throw new Error("Could not find rn-photos-framework's native module. It seems it's not linked correctly in your xcode-project.");export const eventEmitter=new EventEmitter;class RNPhotosFramework{constructor(){this.nativeEventEmitter=new NativeEventEmitter(NativeModules.RNPFManager),this.nativeEventEmitter.addListener("onObjectChange",(e=>{eventEmitter.emit("onObjectChange",e)})),this.nativeEventEmitter.addListener("onLibraryChange",(e=>{eventEmitter.emit("onLibraryChange",e)}));const e=["constructor","libraryStartup","authorizationStatus","requestAuthorization","createJsAsset","withUniqueEventListener"];Object.getOwnPropertyNames(RNPhotosFramework.prototype).filter((t=>-1===e.indexOf(t))).forEach((e=>{const t=this[e];this[e]=function(...e){return this.libraryStartupPromise||(this.libraryStartupPromise=this.libraryStartup()),this.libraryStartupPromise.then((()=>t.apply(this,e)))}.bind(this)}))}onLibraryChange(e){return eventEmitter.addListener("onLibraryChange",e)}libraryStartup(){return RNPFManager.libraryStartup(!0)}authorizationStatus(){return RNPFManager.authorizationStatus()}requestAuthorization(){return RNPFManager.requestAuthorization()}setAllowsCachingHighQualityImages(e){return RNPFManager.setAllowsCachingHighQualityImages(e)}addAssetsToAlbum(e){return RNPFManager.addAssetsToAlbum(e)}removeAssetsFromAlbum(e){return RNPFManager.removeAssetsFromAlbum(e)}getAssets(e){return e&&e.fetchOptions&&void 0===e.assetDisplayStartToEnd&&e.fetchOptions.sortDescriptors&&e.fetchOptions.sortDescriptors.length&&(e.assetDisplayStartToEnd=!0),RNPFManager.getAssets(e).then((e=>({assets:e.assets.map(this.createJsAsset),includesLastAsset:e.includesLastAsset})))}getAssetsWithIndecies(e){return RNPFManager.getAssetsWithIndecies(e).then((e=>e.assets.map(this.createJsAsset)))}getAlbumsCommon(e,t){return this.getAlbumsMany([Object.assign({type:"smartAlbum",subType:"any"},e),Object.assign({type:"album",subType:"any"},e)],t).then((e=>e))}getAlbums(e){return this.getAlbumsMany([e]).then((e=>e[0]))}getAlbumsMany(e,t){return this._getAlbumsManyRaw(e).then((s=>{const r=s.map(((t,s)=>new AlbumQueryResult(t,e[s],eventEmitter)));return t?new AlbumQueryResultCollection(r,e,eventEmitter):r}))}_getAlbumsManyRaw(e){return RNPFManager.getAlbumsMany(e)}getAlbumsByTitle(e){return this.getAlbumsWithParams({albumTitles:[e]})}getAlbumsByTitles(e){return this.getAlbumsWithParams({albumTitles:e})}getAlbumsWithParams(e){return RNPFManager.getAlbumsByTitles(e).then((t=>new AlbumQueryResult(t,e,eventEmitter)))}createAlbum(e){return this.createAlbums([e]).then((e=>e[0]))}createAlbums(e){return RNPFManager.createAlbums(e).then((e=>e.map((e=>new Album(e,void 0,eventEmitter)))))}updateAlbumTitle(e){return RNPFManager.updateAlbumTitle(e)}updateAssets(e){const t=Object.keys(e);return RNPFManager.updateAssets(t,e).then((e=>e))}getAssetsMetadata(e){return RNPFManager.getAssetsMetadata(e)}getAssetsResourcesMetadata(e){return RNPFManager.getAssetsResourcesMetadata(e)}updateAssetsWithResoucesMetadata(e){return new Promise(((t,s)=>{const r=e.filter((e=>void 0===e.resourcesMetadata));r.length?RNPFManager.getAssetsResourcesMetadata(r.map((e=>e.localIdentifier))).then((s=>{r.forEach((e=>{Object.assign(e,s[e.localIdentifier])})),t(e)})):t(e)}))}getImageAssetsMetadata(e){return RNPFManager.getImageAssetsMetadata(e)}deleteAssets(e){return RNPFManager.deleteAssets(e.map((e=>e.localIdentifier)))}deleteAlbums(e){return RNPFManager.deleteAlbums(e.map((e=>e.localIdentifier)))}createImageAsset(e){return this.createAssets({images:[e]}).then((e=>e[0]))}createVideoAsset(e){return this.createAssets({videos:[e]}).then((e=>e[1]))}getPostableAssets(e){return RNPFManager.getPostableAssets(e)}createAssets(e,t){const s=e.images,r=void 0!==e.videos?e.videos.map(videoPropsResolver):e.videos;let a=[];s&&s.length&&(a=a.concat(s.map((e=>({type:"image",source:e}))))),r&&r.length&&(a=a.concat(r.map((e=>({type:"video",source:e})))));const{args:n,unsubscribe:i}=this.withUniqueEventListener("onCreateAssetsProgress",{media:a,albumLocalIdentifier:e.album?e.album.localIdentifier:void 0,includeMetadata:e.includeMetadata},t);return RNPFManager.createAssets(n).then((e=>(i&&i?.remove?.(),e.assets.map(this.createJsAsset))))}withUniqueEventListener(e,t,s){let r;return s&&(t[e]=uuidGenerator(),r=this.nativeEventEmitter.addListener(e,(r=>{s&&r.id&&r.id===t[e]&&s(r)}))),{args:t,unsubscribe:r}}stopTracking(e){return new Promise(((t,s)=>{if(e)return t(RNPFManager.stopTracking(e));t({success:!0,status:"was-not-tracked"})}))}asSingleQueryResult(e,t,s){return new AlbumQueryResultCollection(e,t,s)}createJsAsset(e,t){switch(e.mediaType){case"image":return new ImageAsset(e,t);case"video":return new VideoAsset(e,t)}}saveAssetsToDisk(e,t,s){const{args:r,unsubscribe:a}=this.withUniqueEventListener("onSaveAssetsToFileProgress",{},t.onProgress);return this.updateAssetsWithResoucesMetadata(e.map((e=>e.asset))).then((()=>RNPFManager.saveAssetsToDisk({media:e.map((e=>{const{asset:t}=e,r=e.asset.resourcesMetadata[0];return{fileName:void 0!==s?s(e.asset,r):r.originalFilename,...r,uri:t.uri,localIdentifier:t.localIdentifier,mediaType:t.mediaType,...e.options}})),events:{onSaveAssetsToFileProgress:r.onSaveAssetsToFileProgress}})))}}export default new RNPhotosFramework;